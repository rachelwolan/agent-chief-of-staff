building for, and how this, how this becomes distinct to a web-closed universe. And really, I'd love for the user to have more hands-on behaviors. Hello? Are you still here? Hello? Curate's still here. Now we're in the Curate countdown moment. But Tom is back. Are you still going to message us? I see the signal I'm getting from my wife is to stay out of the way. So, so I'm like, yeah, I'm not sure how useful I'm going to be at home. Like my mom is here. Ah, I see. You've outsourced it to your mom. I see what's going on. All right. I know we've only got a half hour. So you want to kick off Colin? Yeah. Yeah. It's gonna be the quick hits for this one. The point is office hour is a check-in. We've been dark for a minute. So I wanted to make sure leadership understood where we were going. This is after our research of what our current automation users are looking for, checking out what the market is doing in terms of both the majors and the acquisition opportunities that we've been exploring, and a lot of work into how Webflow's existing agents platforms can actually interop with us to become a much more impressive behavior. So the doc has a lot of extra context, but we're going to just jump in for time that for us, agentic automation, in the sense of where the agent ecosystem is going, has interop requirements of external semantic layers that other agent systems will be utilizing. We've seen already this year, almost every major has released their own agent marketplace or community agent builder service system, whether it's Google, Microsoft, Amazon, Bedrock, they're all doing it. And so what is happening is a bunch of companies are now offering their own outcome interface layer. Now, those terms are defined in the context. I pulled from Bain and then when I looked around, actually people are utilizing that language, not my favorite, but it's what I'm going to be talking about at least today, is that there are three layers of interfacing in the agentic world. There's the outcome interfaces, the chat system, the tools that are your daily drivers, where you will be actually activating your automations from, in the most common cases. There's the actual operating system that sits between, that would be the one that actually, it covered the natural language and actually tried to perform the actions beyond. Many staffs are trying to do two of these three in any combination. And then there's the systems of record, which are the true workhorses of any company's SaaS platform, HubSpot, NetSuite, Stripes, Salesforce, whatever it may be. And these are the ones that are being automated too, usually, in that domain. And that's also how the approach of Zapier, Mercado, MuleSoft did as well. They wanted to be the operating system of record and moving between these worlds. But that is now changing the debate because of agentic approaches, where many of these are trying to be combinations. And so for us, we have two major opportunities in the agentic world. It is, we need to be able to interface with these semantic layers and these operating interfaces, because most of our users who want to actually automate their website experiences are not daily drivers of Webflow products. We want them to be, but they're not going to be. And so we need to make sure that we can have our automation, our custom tasks, they'll be activated from external platforms. The second is, there are times that Webflow agents improve the operating experience you have in Webflow. And that would be us creating an interface layer that actually our users would be able to take and enhance through the agentic processes that they can add. AI Assistant is, in my mind, that interface layer, where there is a live chat service, no matter where you are, you can contact someone on your website, that you are able to, not on your website, on your Webflow instance, where you and your users, well, you and your employees are able to activate potentially additional sub-agent tasks that enhance what is out-of-the-box available in AI Assistant. So, to start, and please, because we're talking just here, but just to start, we have two users that really have come through in our interviews of who is using automations today. And we interviewed people who are actually using Webflow in Zapier, Webflow in Make, Webflow in NNN, to understand, how are you putting automation? There are true experts at companies that are big enough. They're typically under an analyst role in some sort of ops role or rev ops role to make automations between systems, who are the experts localizing all of their automations for their stakeholders or internal teams, like a marketing channel manager would have automations built by a mark-ops analyst to move between campaigns of Salesforce to Mailchimp. And then we have the technically savvy small business owners, whether they're freelancers building for clients or they're actually small business but very advanced clients that have a million different tasks they want to automate, but don't really have the knowledge or the focus to be able to really sit down and start to really think about how they automate everything around them. They want things fast, out-of-the-box, and they have so many different things going on, they need to be able to merge many different SMB SaaS that they have acquired to build their business on, pretty much, pay-per-click and go. Those two users, end of the day, have a different degree of complexity of requirements in their automations, but they both have the same common pattern of a need to work in an external manner and they need to also find ways to augment their daily work within one book. Just one is doing it for themselves and the other is doing it for their own clients, well, their own internal teams. Yeah, go on, Rekha. When you say need to work in an external manner, can you just clarify what that means? Yes, yes. So, many times over, you will be using an agent system in like a hotspot that will be creating a campaign and also make a landing page. The effort right now, even with a front-end CPA, is you still must actually maneuver between the systems to operate. The real goal would be able to have these custom automations be able to be redeployed in those other agents. And the reason why operating externally for these agents is important, and the common question that gets asked is, why couldn't I just take a web web CP and do it myself and have just my own external agent be it? Well, the pattern we've seen, at least in the analyst's domain, is they keep the automations localized to the actual system that is being automated on. Despite the fact that you could do a trip campaign builder in Zapier or do a lead routing and a lead scoring system in MuleZonk, you keep that in HubSpot. You have the automations to move data and manipulate data, but you have the core systems operate in their localized context. And that is because two major factors emerge even in the original automation space. The local context you have of the automations have more awareness and more nuance. It hasn't been expecting an outside automation system to get it. That will be also true in agent-to-agent universes. If you are operating on Webflow, we will have more tools available that we can offer in our application, just because it doesn't make sense for it to have an agent absorb that much context or be aware of the systems around it. If you are operating in Webflow, you could grab pages. You have to understand your brand OS, your guidelines of it. Porting all that over MCP will be a massive context chunk. And so there will be times where our agent can operate better than our MCP can offer just because of how we can orchestrate our own internal agent system and platform. And that is what's emerging also in Salesforce AgentForce. We're seeing it happen in HubSpot, too. There is uniqueness of their MCP to what their internal agents are built. So to play this back today for marketing automation, you might end up configuring your workflows in HubSpot, even if you're integrated with Zapier. Zapier is kind of the like behind the scenes wiring that might be happening. But the source of truth for what those automations are going to be is likely sitting in HubSpot. You know, if we had gotten logic correct, it might have been something similar for us if we had actually executed there. Because that's your daily driver. And then you're basically using your daily driver as your source of truth for that logic. That is correct. And we were even seeing logic already do that because the primary use of logic was transforming your form submission data into the adjustable format that were needed for your CRM to then perform your actual new acquisition, new lead form submitted, new whatever it is behavior. That is the emerging behavior for it. And that will likely be how these middleware pages also operate. But I'm going to scroll down a lot and then come back up because the coverage is tripping in this manner. We can offer agents through tooling. The agent activation can be its own tool and you can import your MCP and that's how even opening up a new model, you can import an MCP of agents to be able to activate agents from external sources. So we can augment and enhance any agent in the world to then use our agents as sub-assistants. So we keep the context and the action that are unique to Webflow available and these semantic layers in between interfaces can still call our agents to activate the tasks that are set up on our systems. So instead of the universe where HubSpot was doing lead routing only after receiving an event, now it's a bit more proactive where we could have called HubSpot to start a lead scoring. That's the model shift difference. But more or less, it is the agents that we predict that we are building for. The agents that will be automated through this builder platform will primarily be activated through other orchestrating agents. Now a key value here is it will also be AI-assisted. We're not predicting a world where we're having a competing chat service to activate or competing buttons across Webflow to activate your sub-agent. It is AI-assisted tool call, activate the agent that you have declared for the custom context we're doing. One example I have is a very simple one and also our first version use cases. We'll add it from Shopify that you just added to your product catalog. Make a landing page of it. This is a tool that could be added as just generally an inter-office Shopify and Webflow MCBs, hold together your information and generate a new landing page for it. But if we had many agents available in our tool, I don't know if Google Docs will let me zoom in and out. But the universe here is AI-assisted can actually multicall every different tool that you have. In a launch a marketing campaign for my new Shopify item, make a blog post, make a email marketing campaign, make an Instagram post all from different pages that you already pre-configured and defined on the constraints of what you want to do. To have AI-assisted to do this naturally would be very complicated, but being able to define the agents in a pre-conceived method with their own policy controls and their own actual Webflow rules make it easier to be able to repeat the same things that we offer through our orchestration agent. Harsh, what's up? One of the things you mentioned earlier about context and system of record. So what's going to be our right to win here compared to let's say HubSpot, which is just off record. It has way more context about their business use cases to potentially do the same thing, but in which the context is so much deeper information that the quality of production from these landing pages could be so much better. I don't predict that we will beat HubSpot at the context of their customers or the context of their email marketing. I predict that we will be able to either activate their own tools for those localized actions, but we have more context and we have more knowledge of your brand, of your website, and of how your website is composed, and that's really the distinct factor of where our orchestrations are part of any workflow that would be built on in Webflow Agent Builder. I do not predict at all that people will build in our Agent Builder the lead scoring and the actual campaign structures of HubSpot or Salesforce, but I do predict that they would build how to make a landing page and actually create a landing page, getting the context from the information. In the sequence that you can't see, part of this is calling Shopify's own SKU registry to get the descriptions, to get the pictures, to get all the assets around that SKU product in order to then inform how we draft and write the landing page. That's also, in every other sequence, the guiding opening example is get the information from Shopify first. It has a system of record of the actual product, and then use that information So if I look at this and I think about Bets as a parlay, the reason why you would ask us, and maybe, Ukarsh, I don't know if it's like this is our right to win, but the reason why you would ask us to do this versus HubSpot is that we can actually build the end user experience for you. That's I think the big difference here is that like why would you go and ask HubSpot to automate something when they kind of own what's to the right of the form? We are to the left of that form and we are the end user experience and also that kind of like edge information about the visitor. That is what we already have or what we're like building as well. So if I kind of think it's a parlay of Bets, we've got the landing page generator that like Jason and team are working on. This is what actually informs what ends up going on that landing page. And then, you know, some of the other Bets obviously working on that are like the dam that would be like the content optimization piece. And then we've obviously got optimizes like a content, another source of content optimization, and those all have to work together. So this is like basically kind of the background process of like how you actually generate some of the content for that page. And set user policy of how you want that action to be. There's a, talking to Jason and Brett on this, it is, they want to produce the tools that allow you to be able to generate a landing page, optimize a landing page, learn about potential ideas which make every element better, localize something. But having the user define how they want to train together and what other outside sources they want to inform that behavior is not something any vertical team wants to build into. This is the opportunity that I have had that augmentation and optimization that fits the work that that needs. But also to correct the question, why can't HubSpot do this? It can't do the site. We have more of that as a set. But I do predict that HubSpot agents work with all these sub-tools that do these landing page optimizations as well. It is, we make the HubSpot agent better, but it is still also the system of record of the actual site experience. And that's the, that's the analogy. It's not a zero-sum game. And it wasn't a zero-sum game when 2010, when the Zappers were trying to compete for a share. So the question is, is how we can complement the existing world around so that our users stay here and our system of records becomes more engaged across everyone else's agent system. Yeah, and like my point was, I mean, I agree by the way, I'm kind of playing devil's advocate there, but the, my point here is, like Zappier era was really about not making the internet with pipes without much context, but just make two functions call each other remotely. And with LLMs coming in, what's becoming is all these calls require a ton of extra context, at least in the context engineering front, which covers some data within which you will pick the ones you care about to pass on that specific API call. And to make that work, sometimes we might not have that richness of information about that customer's needs, which is probably sitting somewhere in a CRM for the user. So we'd have to figure out what to call that with context also, because we don't have that in our tools. So, absolutely true. Our agents will need to be activated with inputs of what the given prompt is in the tool setup and the context that it needs to be aware of. And every one of our tool calls, even today in our MCP, have a context description of what we need to be aware of in order to actually perform that call better. It's going to be the same behavior that we're going to have in introducing the agents so it's going to be the same behavior that we're going to have in introducing the agents. So, on this piece, I think the building blocks that we are talking about are the right building blocks to enable agent to agent conversations and a multitude of use cases. What I'm trying to, like, what is the one use case that this team chases, which is already which will, for example, so there's a business use case and then there are building blocks. And a good way of driving outcome is that, hey, we focus on that business use case, make it real, that has a dollar ARR value attached to it and also kind of build the building blocks as we go along that path. And enable the rest of the horizontal use cases. Over there, at least, my understanding was that SEO is one piece where it is a very hard problem. It takes 40, 50, 60 nodes. These are nodes that probably small owners, SPs, et cetera, in some cases might not even be able to set up. And so maybe we are thinking that we enable that particular use case and also provide templates for a couple of these use cases that people can encode it and run. That's where my head was at. Are there, like, top three, four, five use cases that we want to enable that you are thinking of? Yes. But before jumping into the use case I was thinking of, that sounds competitive with the entirety of what Brad is doing on SEO optimization taking too long already. This being a builder platform that enables flexibility and extensibility, the use cases that I'm trying to phase into is different ways to utilize an extensible system with incremental functionality. So primarily every use case is pull from existing systems, utilize that data to do a website experience enhancement, and then potentially push out to an external system. And so every phase of what we wanted to build, building block, had a hero use case that we were trying to enable. Are you looking for overarching no matter what across all of them? That means marketing automation standards? Yeah, so the way I was thinking about this was, for example, if you had to replicate the visual workflow of some of these SEO platforms that are out there, how will those be replicated for within Webflow? Let's take AROMs for example. I'm not sure if Brad is working on a solution where you can define custom workflows for your own particular use case. So you have something special you want to do with SEO, so you have some starter template that you start from, but then modify on top of it for your own use case and take it from there. That's where my head is at. I can take that back and we can define a master use case that is a guiding light for all of it. It's not very platformic, it's very vertical. I'm trying to make sure that we are not becoming the Aerops competitor team in doing an SEO of this world. There's a lot of novelty in SEO. Heather's done explorations of how to represent the builder and how to make it context aware and support the building parts of it, which is already very complex. But if we wanted to build for how do you enable someone to have the most complicated Aerops competitor, and that's our no-star, we can definitely focus on our phasing to enable more and more feature capabilities that would mirror Aerops or mirror... I think maybe the way to... Let's zoom out a little. I think the question is who is going to pay money for this and what is the pain that they have that is going to make them willing to pay enough money for this to make it justify its existence? And so I think Kirat is going deep on AEO, SEO, which is a place where we're obviously thinking about, and I would think about this more as the extensibility, like do you go and have a crapload of agents look at the Google search API and the new API that got released for OpenAI on Answers and Reddit? And this is like the other stuff that would... If we were to go deep on that one first, you're suggesting we go deep on another hero use case around landing pages, which I think is also reasonable, and obviously a place where we're placing a bet on the optimized side. I'd want to make sure that these are like a parlay. I don't know about the parlay bets right now, because I think they're useful on a number of different... Like this would be useful even if you weren't generating a landing page, right? This would be useful if you're using the landing page and you're building it yourself. So I do think that having a hero use case across our teams is what's going to get people to change their behavior. The way you build this is such that it is pigeonholed into one use case. Did I kind of capture that correctly, Kirat? Absolutely. So for example, AI Assistant is the biggest platform innovation journey, but there were a couple of hero use cases that spoke to CMS, and the spike was on design and something. And now it's going to get extended, and we have a document around it, and it's being built in a platform first grade. But we know, okay, these are the places which resonate with our users for sure on the CMS side of the usage. So likewise, having a couple of use cases will keep us very grounded. And we know where the value is. Yeah, and same. Even from an edge point of view, it's very important not to get lost in, like, let's build a platform. This is a very famous quote in engineering, which is, a series of concrete use cases helps you discover abstractions. They're not inventive. So you need not one. So just going on one is also a bad idea. So have at least two use cases, which are hero use cases, and let's build that use cases and nail them. And we build the platform while we're building it out. Can I ask a question about the platform itself? It's more of a technology question. What are we going to do differently now that we have zero minutes left? I want to make sure we're not just building this in a way that is going to be, like, logic v2. But maybe there are some primitives that we, like, preserve from that. But how are we building this such that we can go way, way faster using what is possible today with LLMs and being able to basically translate natural language to code? There are three answers. One is building extensibility. One of the biggest adoption issues for logic was n plus one connections, n plus one actions had to be built in Canvas in native logic. The ability to import an MCP or have an ITAS vendor, like Composio, Lightning, Arcade, to import MCPs that are trusted by a third-party vendor that extends the functionality that you can do is an out-of-the-box ability to then connect your system and records together for what you build with your own. The next is utilizing our API directly and having our MCP to be able to build all the tool functions that you need to do across your site, give the API more flexibility in actually being able to build the actions it wants to automate around. Again, logic required custom eventing to be triggered off the term condition that was built for logic natively. So we decompose and abstract the entirety of how you activate and how you interface into MCP functionality that is not the standard for the entirety of agent operations. That's the biggest key among the differences. The second part that makes it very confusing is then adding in the actual ability to natural language prompt, which we've done many experiments on. It is the reason HyperMode is so attractive. It's the reason Smith was a thing I heard for a while. It is that it's our individual design. A more complicated visual designer than Zapier is not going to be able to adapt. And so building from explaining neatly what you want to do and then refining the feel of what you want to see outcomes is going to be a differentiator in this. There's a million different groups now that you can design for agents. But there are very few that are nailing down the chat interface to be able to build it appropriately. And the third part of mixed logic is the in-context activation of these agents. Agents are not reactive behaviors on what sort of trigger conditions. It is augmentation that you do to enhance AI assistance or your external agent structures. And so it is the ability to be in-context with AI assistance and then say, generate a landing page. It is being able to say, please update my Shopify account based on what we're doing right now. Those connective behaviors and having predefined flows that define how you want this to actually orchestrate for what you need to your business is the customization and the refinement that we can offer to our analysts, our analyst clients in order to find that having us go in the entire logic gate and building the N plus one policy controls. Logic requires us to support all the rules that you want to implement. In NLM, we are able to extract all that to give the policy controls to the user. So we are not responsible for offering all the corn cases and nuances you want in your logic flow. Okay, that is helpful from like a North Star standpoint. I think it would also be helpful, Heather, when you're ready to maybe record a loom, at least for me, to understand what you're thinking. Obviously, you've been deep in this for a long time. Maybe, can we spend, actually, I've got a couple of minutes. I don't know if other people do. Could we spend just a couple of minutes looking at this? Yeah, one thing I do want to know about generalized workflow builders that are on the market right now is that they are very, very atomic. So they require the user to know exactly which nodes and exactly which triggers they need to do. I think a true gap in the market is the ability to be the extraction layer between atomic level and the prompt. Generally, when it comes to value perception, users want to see the underlying logic and what the LLM is actually doing. They don't want to feel like they're ceding over all of the control. But there's not really any product that essentially infers and does this abstraction layer like a step higher. And so when I'm thinking about value proposition and these really bespoke high-value use cases, it's like, yeah, someone who wants to improve the SEO on their site, they don't know that sometimes in order to create really high-quality, production-grade SEO, you need search research, you need keyword analysis, you need topical analysis, you need to run AI detection on the content that's produced. Essentially, we will have that routing layer and the planning layer of how these workflows are built is this is essentially an LLM-powered abstraction layer where it's performing all of these skills underneath the hood based on the type of task that the user wants to accomplish. That makes sense. I see two things I have a question about here. What does edit trigger mean? And is that going to be a visual interface or will that still be a prompt-based interface as well? I think eventually it will need to be both. We will have prompt to help build, plan, and refine. I think as, I would say workflow building is almost like crawl, walk, run in terms of complexity and understanding. A lot of people start at the crawl level where they need it abstracted deeply for them and then you have highly technical users who want to get really gritty, really granular with every single prompt section or every single setting. So it's like being able to still edit it in a visual manner is still needed for really custom refinement. I'm gonna ask this in a little bit of a pointed way. Could we get to market without that and make it so that you're passing that element into the assistant and such that you can prompt it and have a visual, like I think we could get to market a lot faster if we didn't have to have that. The answer is yes, but you will have a trust factor. You'll have a bigger possibility for trust. A lot of people, while. But if you can see it, sorry, let me, if you can see what it's doing and you have a way to edit it that is just your natural language. Like I want to just break our visual design paradigm for a minute and like do you actually need that today and will that actually be slowing us down? Could we prototype is maybe like a question I would have for you. And tell me where it breaks. Like I think that that would be like my question for you all is like can we prototype that and see where it breaks? And maybe you don't need to build everything that way. We have a question whether you need this like layer to granularly edit the prompt or whether you can do it just through the time. No, no, no, I think it's fine to edit the prompt this way. I'm talking about if you actually have to have a visual like builder. It's one thing for it to just be text, like a wall of text that you're basically modifying. It's another thing to have to have a like pure, like a Zapier, like if this and that and then you have like you plus this and you add this trigger and blah, blah, blah. Like that's a different amount of visual interface that you'll have to go build. This thing in the middle I imagine can be generated. So that's like my question for you is like what is the least amount of UI that we can build to have something that people trust? Yeah. It's a really interesting journey to try to see how we can push more and more and still have them trust. My second question for you is can that trust come through, like are we going to use our existing ecosystem and how? Like is there gonna be an MCP that is somehow accessible through our existing ecosystem partners and then if you wanna have something that's editable, it's through that or is this something where we're gonna use any, like that's where I get like a little confused of like where that vision is. When you talk about ecosystem, there's no in the early roadmap intention of having apps be able to immediately configure your workflows for you or import the workflows. There's a we'd like to pursue that one. That's definitely an ecosystem play but depending on how the prompts are structured or the tasks are structured, it depends on how structured the system is in the scheme around it. And there's an incredible amount of validation risk on that's happening now with exploration text. What we do wanna see though is we do want to be able to have MCPs be imported. We want to be able to see prompts, a prompt library to help create and share different really great templates with the actual full importing of a scheme, especially if there's not a visual review of it, it's going to be a new risk that hasn't really been understood yet and it's a big problem happening in space. I get that. I get that that is like maybe a phase two question. It might be worth having, if you have a hero use case like HubSpot for example, where it's like a form that is going to go and do something into HubSpot. It might be worth exploring with them or with a partner that can go and build something. Not to say do it for everything but like have one or, you know, as part of your use case, then you get the visual builder out of the box. Like we kind of own some of those use cases ourselves or we've like built the integrations ourselves. So it's a little easier to kind of tell a partner what we want to have them do and it might not be something that hits our engineering team. So that's one thing that is worth looking at and not like everything. I understand that's like a totally different effort to get like all of our existing ecosystem partners to work with us. That's like not at all what I'm talking about. Okay, I do have to go. This is great. I'm really excited about the direction you're going in. Thank you, Heather. Nice to meet you. And just excited. Is this staffed yet with engineering? I can take a step on that. Not fully. I think there's some variables around especially on that acquisition. Yeah. But once we like nail down and align on, okay, here are our first like couple of MVP use cases that we want to march towards then we'll search on it. Okay. On my team, on the development team. Okay, so we're in discovery. I'm just trying to like, that's fine. I think that that is the place where we should be right now. Okay, this is helpful from a directional standpoint. Thank you. All right. See you soon. Bye. Recording. Sorry, sorry, sorry. That one went a little long. Kelly, what is?