# Agent Chief of Staff - Cursor Rules

## Project Type
Spec-driven AI agent system using Claude 3.5 Sonnet for executive support (calendar intelligence, meeting prep, transcriptions, dossiers).

## Code Standards

### TypeScript
- ES2022 target with Node module resolution
- ES Modules: **Must** include `.js` extensions in imports (for compiled output)
- Use Zod schemas for validation

### File Naming
- Agents: `kebab-case.md` (e.g., `meeting-prep.md`)
- TypeScript: `camelCase.ts` (e.g., `agentRunner.ts`)
- Config: lowercase with hyphens

### Key Patterns

**Template Variables**: Prompts use `{{variable}}` syntax for runtime substitution
```markdown
Please prepare for meeting with {{attendees}} at {{time}}.
```

**Validation**: Zod schemas validate inputs/outputs before and after execution

**Logging**: All executions logged to `/logs/` with timestamps

## Quick Commands

```bash
# Development
npm run dev                  # Hot reload
npm run build               # Compile TypeScript

# Dossier (Gmail newsletters â†’ Claude analysis)
npm run dossier:auth        # Authenticate Gmail once
npm run dossier:generate    # Generate today's dossier

# Calendar
npm run calendar:today      # Today's schedule
npm run calendar:auth       # Re-authenticate

# Agents
node dist/cli.js run agents/agent-name.md    # Production
node dist/cli.js quick agents/agent-name.md  # Test with sample data
```

## AI Dev Tasks Workflow

For complex features, use structured PRD workflow:

1. `/create-prd` - Create Product Requirements Document
2. `/generate-tasks` - Break PRD into task list
3. `/process-task-list` - Work through tasks with approval

Files stored in `/tasks/` as `[n]-prd-[feature].md` and `tasks-[n]-prd-[feature].md`

## Core Architecture

**Agents** (`/agents/*.md`): Markdown specs with job statement, Zod schemas, prompt templates
**Agent Runner** (`src/lib/agent-runner.ts`): Parses specs, calls Claude API, logs results
**Services** (`src/services/`): Gmail, Google Calendar, Slack, Tableau integrations
**CLI** (`src/cli.ts`): Commander.js interface for running agents

## Integration Points

- **Gmail**: Personal Gmail OAuth for newsletter extraction (dossier generation)
- **Google Calendar**: OAuth 2.0 for calendar access
- **Anthropic Claude**: Claude Sonnet 4.5 for dossier analysis
- **Slack**: Bot tokens for notifications
- **Tableau**: MCP server for dashboard monitoring

## What NOT to Commit

- `/dist/` - compiled JavaScript
- `/logs/` - execution logs
- `/data/` - generated outputs
- `.env` - environment variables
- `node_modules/` - dependencies

## Documentation

See `/docs/` for comprehensive guides:
- Quick Start: `/docs/quick-start.md`
- Setup: `/docs/setup.md`
- Commands: `/docs/reference/commands.md`
- Architecture: `/docs/reference/architecture.md`
- Guides: `/docs/guides/`

## Personal Context

Personal resources in `/docs/personal/`:
- CPO prep materials
- Communication frameworks (Decker method)
- Webflow product overview
- Custom AI instructions